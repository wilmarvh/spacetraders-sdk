//
// SystemsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SystemsAPI {

    /**
     Get Jump Gate
     
     - parameter systemSymbol: (path) The system symbol 
     - parameter waypointSymbol: (path) The waypoint symbol 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getJumpGate(systemSymbol: String, waypointSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetJumpGate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getJumpGateWithRequestBuilder(systemSymbol: systemSymbol, waypointSymbol: waypointSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Jump Gate
     - GET /systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate
     - Get jump gate details for a waypoint.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter systemSymbol: (path) The system symbol 
     - parameter waypointSymbol: (path) The waypoint symbol 
     - returns: RequestBuilder<GetJumpGate200Response> 
     */
    open class func getJumpGateWithRequestBuilder(systemSymbol: String, waypointSymbol: String) -> RequestBuilder<GetJumpGate200Response> {
        var localVariablePath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate"
        let systemSymbolPreEscape = "\(APIHelper.mapValueToPathItem(systemSymbol))"
        let systemSymbolPostEscape = systemSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{systemSymbol}", with: systemSymbolPostEscape, options: .literal, range: nil)
        let waypointSymbolPreEscape = "\(APIHelper.mapValueToPathItem(waypointSymbol))"
        let waypointSymbolPostEscape = waypointSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{waypointSymbol}", with: waypointSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetJumpGate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Market
     
     - parameter systemSymbol: (path) The system symbol 
     - parameter waypointSymbol: (path) The waypoint symbol 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMarket(systemSymbol: String, waypointSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetMarket200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getMarketWithRequestBuilder(systemSymbol: systemSymbol, waypointSymbol: waypointSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Market
     - GET /systems/{systemSymbol}/waypoints/{waypointSymbol}/market
     - Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter systemSymbol: (path) The system symbol 
     - parameter waypointSymbol: (path) The waypoint symbol 
     - returns: RequestBuilder<GetMarket200Response> 
     */
    open class func getMarketWithRequestBuilder(systemSymbol: String, waypointSymbol: String) -> RequestBuilder<GetMarket200Response> {
        var localVariablePath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/market"
        let systemSymbolPreEscape = "\(APIHelper.mapValueToPathItem(systemSymbol))"
        let systemSymbolPostEscape = systemSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{systemSymbol}", with: systemSymbolPostEscape, options: .literal, range: nil)
        let waypointSymbolPreEscape = "\(APIHelper.mapValueToPathItem(waypointSymbol))"
        let waypointSymbolPostEscape = waypointSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{waypointSymbol}", with: waypointSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMarket200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Shipyard
     
     - parameter systemSymbol: (path) The system symbol 
     - parameter waypointSymbol: (path) The waypoint symbol 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getShipyard(systemSymbol: String, waypointSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetShipyard200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getShipyardWithRequestBuilder(systemSymbol: systemSymbol, waypointSymbol: waypointSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Shipyard
     - GET /systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard
     - Get the shipyard for a waypoint.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter systemSymbol: (path) The system symbol 
     - parameter waypointSymbol: (path) The waypoint symbol 
     - returns: RequestBuilder<GetShipyard200Response> 
     */
    open class func getShipyardWithRequestBuilder(systemSymbol: String, waypointSymbol: String) -> RequestBuilder<GetShipyard200Response> {
        var localVariablePath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard"
        let systemSymbolPreEscape = "\(APIHelper.mapValueToPathItem(systemSymbol))"
        let systemSymbolPostEscape = systemSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{systemSymbol}", with: systemSymbolPostEscape, options: .literal, range: nil)
        let waypointSymbolPreEscape = "\(APIHelper.mapValueToPathItem(waypointSymbol))"
        let waypointSymbolPostEscape = waypointSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{waypointSymbol}", with: waypointSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetShipyard200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get System
     
     - parameter systemSymbol: (path) The system symbol 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSystem(systemSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetSystem200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getSystemWithRequestBuilder(systemSymbol: systemSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get System
     - GET /systems/{systemSymbol}
     - Get the details of a system.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter systemSymbol: (path) The system symbol 
     - returns: RequestBuilder<GetSystem200Response> 
     */
    open class func getSystemWithRequestBuilder(systemSymbol: String) -> RequestBuilder<GetSystem200Response> {
        var localVariablePath = "/systems/{systemSymbol}"
        let systemSymbolPreEscape = "\(APIHelper.mapValueToPathItem(systemSymbol))"
        let systemSymbolPostEscape = systemSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{systemSymbol}", with: systemSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetSystem200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Waypoints
     
     - parameter systemSymbol: (path) The system symbol 
     - parameter page: (query) What entry offset to request (optional)
     - parameter limit: (query) How many entries to return per page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSystemWaypoints(systemSymbol: String, page: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetSystemWaypoints200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getSystemWaypointsWithRequestBuilder(systemSymbol: systemSymbol, page: page, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Waypoints
     - GET /systems/{systemSymbol}/waypoints
     - Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter systemSymbol: (path) The system symbol 
     - parameter page: (query) What entry offset to request (optional)
     - parameter limit: (query) How many entries to return per page (optional)
     - returns: RequestBuilder<GetSystemWaypoints200Response> 
     */
    open class func getSystemWaypointsWithRequestBuilder(systemSymbol: String, page: Int? = nil, limit: Int? = nil) -> RequestBuilder<GetSystemWaypoints200Response> {
        var localVariablePath = "/systems/{systemSymbol}/waypoints"
        let systemSymbolPreEscape = "\(APIHelper.mapValueToPathItem(systemSymbol))"
        let systemSymbolPostEscape = systemSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{systemSymbol}", with: systemSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetSystemWaypoints200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Systems
     
     - parameter page: (query) What entry offset to request (optional)
     - parameter limit: (query) How many entries to return per page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSystems(page: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetSystems200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getSystemsWithRequestBuilder(page: page, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Systems
     - GET /systems
     - Return a list of all systems.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter page: (query) What entry offset to request (optional)
     - parameter limit: (query) How many entries to return per page (optional)
     - returns: RequestBuilder<GetSystems200Response> 
     */
    open class func getSystemsWithRequestBuilder(page: Int? = nil, limit: Int? = nil) -> RequestBuilder<GetSystems200Response> {
        let localVariablePath = "/systems"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetSystems200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Waypoint
     
     - parameter systemSymbol: (path) The system symbol 
     - parameter waypointSymbol: (path) The waypoint symbol 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWaypoint(systemSymbol: String, waypointSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetWaypoint200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getWaypointWithRequestBuilder(systemSymbol: systemSymbol, waypointSymbol: waypointSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Waypoint
     - GET /systems/{systemSymbol}/waypoints/{waypointSymbol}
     - View the details of a waypoint.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter systemSymbol: (path) The system symbol 
     - parameter waypointSymbol: (path) The waypoint symbol 
     - returns: RequestBuilder<GetWaypoint200Response> 
     */
    open class func getWaypointWithRequestBuilder(systemSymbol: String, waypointSymbol: String) -> RequestBuilder<GetWaypoint200Response> {
        var localVariablePath = "/systems/{systemSymbol}/waypoints/{waypointSymbol}"
        let systemSymbolPreEscape = "\(APIHelper.mapValueToPathItem(systemSymbol))"
        let systemSymbolPostEscape = systemSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{systemSymbol}", with: systemSymbolPostEscape, options: .literal, range: nil)
        let waypointSymbolPreEscape = "\(APIHelper.mapValueToPathItem(waypointSymbol))"
        let waypointSymbolPostEscape = waypointSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{waypointSymbol}", with: waypointSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetWaypoint200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
