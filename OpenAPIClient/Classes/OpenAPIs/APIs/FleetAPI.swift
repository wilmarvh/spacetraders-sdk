//
// FleetAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FleetAPI {

    /**
     Create Chart
     
     - parameter shipSymbol: (path) The symbol of the ship 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createChart(shipSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateChart201Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createChartWithRequestBuilder(shipSymbol: shipSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Chart
     - POST /my/ships/{shipSymbol}/chart
     - Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path) The symbol of the ship 
     - returns: RequestBuilder<CreateChart201Response> 
     */
    open class func createChartWithRequestBuilder(shipSymbol: String) -> RequestBuilder<CreateChart201Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/chart"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateChart201Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Scan Ships
     
     - parameter shipSymbol: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createShipShipScan(shipSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateShipShipScan201Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createShipShipScanWithRequestBuilder(shipSymbol: shipSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Scan Ships
     - POST /my/ships/{shipSymbol}/scan/ships
     - Activate your ship's sensor arrays to scan for ship information.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path)  
     - returns: RequestBuilder<CreateShipShipScan201Response> 
     */
    open class func createShipShipScanWithRequestBuilder(shipSymbol: String) -> RequestBuilder<CreateShipShipScan201Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/scan/ships"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateShipShipScan201Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Scan Systems
     
     - parameter shipSymbol: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createShipSystemScan(shipSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateShipSystemScan201Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createShipSystemScanWithRequestBuilder(shipSymbol: shipSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Scan Systems
     - POST /my/ships/{shipSymbol}/scan/systems
     - Activate your ship's sensor arrays to scan for system information.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path)  
     - returns: RequestBuilder<CreateShipSystemScan201Response> 
     */
    open class func createShipSystemScanWithRequestBuilder(shipSymbol: String) -> RequestBuilder<CreateShipSystemScan201Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/scan/systems"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateShipSystemScan201Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Scan Waypoints
     
     - parameter shipSymbol: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createShipWaypointScan(shipSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateShipWaypointScan201Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createShipWaypointScanWithRequestBuilder(shipSymbol: shipSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Scan Waypoints
     - POST /my/ships/{shipSymbol}/scan/waypoints
     - Activate your ship's sensor arrays to scan for waypoint information.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path)  
     - returns: RequestBuilder<CreateShipWaypointScan201Response> 
     */
    open class func createShipWaypointScanWithRequestBuilder(shipSymbol: String) -> RequestBuilder<CreateShipWaypointScan201Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/scan/waypoints"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateShipWaypointScan201Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Survey
     
     - parameter shipSymbol: (path) The symbol of the ship 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createSurvey(shipSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateSurvey201Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createSurveyWithRequestBuilder(shipSymbol: shipSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Survey
     - POST /my/ships/{shipSymbol}/survey
     - If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path) The symbol of the ship 
     - returns: RequestBuilder<CreateSurvey201Response> 
     */
    open class func createSurveyWithRequestBuilder(shipSymbol: String) -> RequestBuilder<CreateSurvey201Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/survey"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateSurvey201Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Dock Ship
     
     - parameter shipSymbol: (path) The symbol of the ship 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func dockShip(shipSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DockShip200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return dockShipWithRequestBuilder(shipSymbol: shipSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Dock Ship
     - POST /my/ships/{shipSymbol}/dock
     - Attempt to dock your ship at it's current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path) The symbol of the ship 
     - returns: RequestBuilder<DockShip200Response> 
     */
    open class func dockShipWithRequestBuilder(shipSymbol: String) -> RequestBuilder<DockShip200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/dock"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DockShip200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Extract Resources
     
     - parameter shipSymbol: (path) The ship symbol 
     - parameter extractResourcesRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func extractResources(shipSymbol: String, extractResourcesRequest: ExtractResourcesRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExtractResources201Response?, _ error: Error?) -> Void)) -> RequestTask {
        return extractResourcesWithRequestBuilder(shipSymbol: shipSymbol, extractResourcesRequest: extractResourcesRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Extract Resources
     - POST /my/ships/{shipSymbol}/extract
     - Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path) The ship symbol 
     - parameter extractResourcesRequest: (body)  (optional)
     - returns: RequestBuilder<ExtractResources201Response> 
     */
    open class func extractResourcesWithRequestBuilder(shipSymbol: String, extractResourcesRequest: ExtractResourcesRequest? = nil) -> RequestBuilder<ExtractResources201Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/extract"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: extractResourcesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExtractResources201Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Ship
     
     - parameter shipSymbol: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMyShip(shipSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetMyShip200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getMyShipWithRequestBuilder(shipSymbol: shipSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Ship
     - GET /my/ships/{shipSymbol}
     - Retrieve the details of your ship.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path)  
     - returns: RequestBuilder<GetMyShip200Response> 
     */
    open class func getMyShipWithRequestBuilder(shipSymbol: String) -> RequestBuilder<GetMyShip200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMyShip200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Ship Cargo
     
     - parameter shipSymbol: (path) The symbol of the ship 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMyShipCargo(shipSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetMyShipCargo200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getMyShipCargoWithRequestBuilder(shipSymbol: shipSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Ship Cargo
     - GET /my/ships/{shipSymbol}/cargo
     - Retrieve the cargo of your ship.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path) The symbol of the ship 
     - returns: RequestBuilder<GetMyShipCargo200Response> 
     */
    open class func getMyShipCargoWithRequestBuilder(shipSymbol: String) -> RequestBuilder<GetMyShipCargo200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/cargo"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMyShipCargo200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Ships
     
     - parameter page: (query) What entry offset to request (optional)
     - parameter limit: (query) How many entries to return per page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMyShips(page: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetMyShips200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getMyShipsWithRequestBuilder(page: page, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Ships
     - GET /my/ships
     - Retrieve all of your ships.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter page: (query) What entry offset to request (optional)
     - parameter limit: (query) How many entries to return per page (optional)
     - returns: RequestBuilder<GetMyShips200Response> 
     */
    open class func getMyShipsWithRequestBuilder(page: Int? = nil, limit: Int? = nil) -> RequestBuilder<GetMyShips200Response> {
        let localVariablePath = "/my/ships"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMyShips200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Ship Cooldown
     
     - parameter shipSymbol: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getShipCooldown(shipSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetShipCooldown200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getShipCooldownWithRequestBuilder(shipSymbol: shipSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Ship Cooldown
     - GET /my/ships/{shipSymbol}/cooldown
     - Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path)  
     - returns: RequestBuilder<GetShipCooldown200Response?> 
     */
    open class func getShipCooldownWithRequestBuilder(shipSymbol: String) -> RequestBuilder<GetShipCooldown200Response?> {
        var localVariablePath = "/my/ships/{shipSymbol}/cooldown"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetShipCooldown200Response?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Ship Nav
     
     - parameter shipSymbol: (path) The ship symbol 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getShipNav(shipSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetShipNav200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getShipNavWithRequestBuilder(shipSymbol: shipSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Ship Nav
     - GET /my/ships/{shipSymbol}/nav
     - Get the current nav status of a ship.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path) The ship symbol 
     - returns: RequestBuilder<GetShipNav200Response> 
     */
    open class func getShipNavWithRequestBuilder(shipSymbol: String) -> RequestBuilder<GetShipNav200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/nav"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetShipNav200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Jettison Cargo
     
     - parameter shipSymbol: (path)  
     - parameter jettisonRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func jettison(shipSymbol: String, jettisonRequest: JettisonRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Jettison200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return jettisonWithRequestBuilder(shipSymbol: shipSymbol, jettisonRequest: jettisonRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Jettison Cargo
     - POST /my/ships/{shipSymbol}/jettison
     - Jettison cargo from your ship's cargo hold.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path)  
     - parameter jettisonRequest: (body)  (optional)
     - returns: RequestBuilder<Jettison200Response> 
     */
    open class func jettisonWithRequestBuilder(shipSymbol: String, jettisonRequest: JettisonRequest? = nil) -> RequestBuilder<Jettison200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/jettison"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jettisonRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Jettison200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Jump Ship
     
     - parameter shipSymbol: (path)  
     - parameter jumpShipRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func jumpShip(shipSymbol: String, jumpShipRequest: JumpShipRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: JumpShip200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return jumpShipWithRequestBuilder(shipSymbol: shipSymbol, jumpShipRequest: jumpShipRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Jump Ship
     - POST /my/ships/{shipSymbol}/jump
     - Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path)  
     - parameter jumpShipRequest: (body)  (optional)
     - returns: RequestBuilder<JumpShip200Response> 
     */
    open class func jumpShipWithRequestBuilder(shipSymbol: String, jumpShipRequest: JumpShipRequest? = nil) -> RequestBuilder<JumpShip200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/jump"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jumpShipRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JumpShip200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Navigate Ship
     
     - parameter shipSymbol: (path) The ship symbol 
     - parameter navigateShipRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func navigateShip(shipSymbol: String, navigateShipRequest: NavigateShipRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NavigateShip200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return navigateShipWithRequestBuilder(shipSymbol: shipSymbol, navigateShipRequest: navigateShipRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Navigate Ship
     - POST /my/ships/{shipSymbol}/navigate
     - Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.  To travel between systems, see the ship's warp or jump actions.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path) The ship symbol 
     - parameter navigateShipRequest: (body)  (optional)
     - returns: RequestBuilder<NavigateShip200Response> 
     */
    open class func navigateShipWithRequestBuilder(shipSymbol: String, navigateShipRequest: NavigateShipRequest? = nil) -> RequestBuilder<NavigateShip200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/navigate"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: navigateShipRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NavigateShip200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Orbit Ship
     
     - parameter shipSymbol: (path) The symbol of the ship 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orbitShip(shipSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrbitShip200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return orbitShipWithRequestBuilder(shipSymbol: shipSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Orbit Ship
     - POST /my/ships/{shipSymbol}/orbit
     - Attempt to move your ship into orbit at it's current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path) The symbol of the ship 
     - returns: RequestBuilder<OrbitShip200Response> 
     */
    open class func orbitShipWithRequestBuilder(shipSymbol: String) -> RequestBuilder<OrbitShip200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/orbit"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrbitShip200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patch Ship Nav
     
     - parameter shipSymbol: (path) The ship symbol 
     - parameter patchShipNavRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func patchShipNav(shipSymbol: String, patchShipNavRequest: PatchShipNavRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetShipNav200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return patchShipNavWithRequestBuilder(shipSymbol: shipSymbol, patchShipNavRequest: patchShipNavRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patch Ship Nav
     - PATCH /my/ships/{shipSymbol}/nav
     - Update the nav data of a ship, such as the flight mode.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path) The ship symbol 
     - parameter patchShipNavRequest: (body)  (optional)
     - returns: RequestBuilder<GetShipNav200Response> 
     */
    open class func patchShipNavWithRequestBuilder(shipSymbol: String, patchShipNavRequest: PatchShipNavRequest? = nil) -> RequestBuilder<GetShipNav200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/nav"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchShipNavRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetShipNav200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Purchase Cargo
     
     - parameter shipSymbol: (path)  
     - parameter purchaseCargoRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchaseCargo(shipSymbol: String, purchaseCargoRequest: PurchaseCargoRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PurchaseCargo201Response?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseCargoWithRequestBuilder(shipSymbol: shipSymbol, purchaseCargoRequest: purchaseCargoRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Purchase Cargo
     - POST /my/ships/{shipSymbol}/purchase
     - Purchase cargo.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path)  
     - parameter purchaseCargoRequest: (body)  (optional)
     - returns: RequestBuilder<PurchaseCargo201Response> 
     */
    open class func purchaseCargoWithRequestBuilder(shipSymbol: String, purchaseCargoRequest: PurchaseCargoRequest? = nil) -> RequestBuilder<PurchaseCargo201Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/purchase"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: purchaseCargoRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PurchaseCargo201Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Purchase Ship
     
     - parameter purchaseShipRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchaseShip(purchaseShipRequest: PurchaseShipRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PurchaseShip201Response?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseShipWithRequestBuilder(purchaseShipRequest: purchaseShipRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Purchase Ship
     - POST /my/ships
     - Purchase a ship
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter purchaseShipRequest: (body)  (optional)
     - returns: RequestBuilder<PurchaseShip201Response> 
     */
    open class func purchaseShipWithRequestBuilder(purchaseShipRequest: PurchaseShipRequest? = nil) -> RequestBuilder<PurchaseShip201Response> {
        let localVariablePath = "/my/ships"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: purchaseShipRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PurchaseShip201Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Refuel Ship
     
     - parameter shipSymbol: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func refuelShip(shipSymbol: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RefuelShip200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return refuelShipWithRequestBuilder(shipSymbol: shipSymbol).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Refuel Ship
     - POST /my/ships/{shipSymbol}/refuel
     - Refuel your ship from the local market.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path)  
     - returns: RequestBuilder<RefuelShip200Response> 
     */
    open class func refuelShipWithRequestBuilder(shipSymbol: String) -> RequestBuilder<RefuelShip200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/refuel"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RefuelShip200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Sell Cargo
     
     - parameter shipSymbol: (path)  
     - parameter sellCargoRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sellCargo(shipSymbol: String, sellCargoRequest: SellCargoRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SellCargo201Response?, _ error: Error?) -> Void)) -> RequestTask {
        return sellCargoWithRequestBuilder(shipSymbol: shipSymbol, sellCargoRequest: sellCargoRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sell Cargo
     - POST /my/ships/{shipSymbol}/sell
     - Sell cargo.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path)  
     - parameter sellCargoRequest: (body)  (optional)
     - returns: RequestBuilder<SellCargo201Response> 
     */
    open class func sellCargoWithRequestBuilder(shipSymbol: String, sellCargoRequest: SellCargoRequest? = nil) -> RequestBuilder<SellCargo201Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/sell"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sellCargoRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SellCargo201Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Ship Refine
     
     - parameter shipSymbol: (path) The symbol of the ship 
     - parameter shipRefineRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shipRefine(shipSymbol: String, shipRefineRequest: ShipRefineRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShipRefine200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return shipRefineWithRequestBuilder(shipSymbol: shipSymbol, shipRefineRequest: shipRefineRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Ship Refine
     - POST /my/ships/{shipSymbol}/refine
     - Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path) The symbol of the ship 
     - parameter shipRefineRequest: (body)  (optional)
     - returns: RequestBuilder<ShipRefine200Response> 
     */
    open class func shipRefineWithRequestBuilder(shipSymbol: String, shipRefineRequest: ShipRefineRequest? = nil) -> RequestBuilder<ShipRefine200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/refine"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shipRefineRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShipRefine200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Transfer Cargo
     
     - parameter shipSymbol: (path)  
     - parameter transferCargoRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func transferCargo(shipSymbol: String, transferCargoRequest: TransferCargoRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TransferCargo200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return transferCargoWithRequestBuilder(shipSymbol: shipSymbol, transferCargoRequest: transferCargoRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Transfer Cargo
     - POST /my/ships/{shipSymbol}/transfer
     - Transfer cargo between ships.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path)  
     - parameter transferCargoRequest: (body)  (optional)
     - returns: RequestBuilder<TransferCargo200Response> 
     */
    open class func transferCargoWithRequestBuilder(shipSymbol: String, transferCargoRequest: TransferCargoRequest? = nil) -> RequestBuilder<TransferCargo200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/transfer"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferCargoRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferCargo200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Warp Ship
     
     - parameter shipSymbol: (path)  
     - parameter navigateShipRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func warpShip(shipSymbol: String, navigateShipRequest: NavigateShipRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NavigateShip200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return warpShipWithRequestBuilder(shipSymbol: shipSymbol, navigateShipRequest: navigateShipRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Warp Ship
     - POST /my/ships/{shipSymbol}/warp
     - Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
     - BASIC:
       - type: http
       - name: AgentToken
     - parameter shipSymbol: (path)  
     - parameter navigateShipRequest: (body)  (optional)
     - returns: RequestBuilder<NavigateShip200Response> 
     */
    open class func warpShipWithRequestBuilder(shipSymbol: String, navigateShipRequest: NavigateShipRequest? = nil) -> RequestBuilder<NavigateShip200Response> {
        var localVariablePath = "/my/ships/{shipSymbol}/warp"
        let shipSymbolPreEscape = "\(APIHelper.mapValueToPathItem(shipSymbol))"
        let shipSymbolPostEscape = shipSymbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shipSymbol}", with: shipSymbolPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: navigateShipRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NavigateShip200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
